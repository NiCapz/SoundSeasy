/*
  ==============================================================================

    MatrixReverb.h
    Created: 15 Mar 2025 8:41:20pm
    Author:  Karl Diedrichsen

  ==============================================================================
*/

#pragma once

#include <atomic>
#include <Eigen/Dense>
#include "../SmoothedParameter.h"
#include <JuceHeader.h>
#include <algorithm>
#include <mutex>



class MatrixReverb
{
public:
    MatrixReverb(std::atomic<float>* distance,
            std::atomic<float>* chorus,
            std::atomic<float>* decayS,
            std::atomic<float>* damp,
            std::atomic<float>* density);
    
    void setSamplerate(float);
    void processBlock(juce::AudioBuffer<float>&);
    
private:
    static constexpr int numKernels = 12;
    
    void calculateDelays();
    
    SmoothedParameter<float> distance;
    SmoothedParameter<float> chorus;
    SmoothedParameter<float> decayS;
    SmoothedParameter<float> damp;
    SmoothedParameter<float> density;

    const float smoothingMs = 10;
    float smoothingCoeff;
    
    float projectSampleRate = 44100;
    
    const float maxDelayMs = 400;
    const float minD0 = 16;
    const float maxD0 = 100;
    const float maxD1 = 120;
    
    std::array<float, numKernels> targetDelays;
    std::array<float, numKernels> delays;
    std::array<float, numKernels> lowpassSamples;
    std::array<std::vector<float>, numKernels> delayBuffer;
    std::array<std::vector<float>, numKernels> outputBuffer;
    int delayBufferIndex = 0;
    int delayBufferSize;
    
    const float allpassDelayRatio = (0.1465 * 3.0) / 7;
    std::array<float, numKernels> targetAllpassDelays{0};
    std::array<float, numKernels> allpassDelays{0};
    std::array<std::vector<float>, numKernels> allpassBuffer;
    int allpassBufferIndex = 0;
    int allpassBufferSize;
    static constexpr int processingBufferSize = 256;
    Eigen::Matrix<float, numKernels, 1> feedbackSamples[processingBufferSize];
    std::array<float, numKernels> targetDecays{0};
    Eigen::Matrix<float, numKernels, numKernels> decayMatrix;
    Eigen::Matrix<float, numKernels, numKernels> diffuseMatrix;
    std::array<float, numKernels> decayCoeffs{0};

    const float modDepth = 100;
    const float modFrequency = 0.5;
    float modIncrement = 0;
    std::array<float, numKernels> modPhases{0};
    
    
    std::array<std::array<float, processingBufferSize>, numKernels> processingBuffers;
    
    static constexpr float matrix_data[] = {0.46487122160156646, -0.39898323370909755, -0.026016701495493826, 0.27917791002788195, 0.0526963701744581, -0.26723357895701033, 0.030822500443526732, -0.20087940556468004, 0.2082358844357975, 0.5521424370554001, -0.28122219516818714, -0.05733515202418062, -0.11121514320906123, 0.23725076021255348, -0.5071010011640347, 0.2822791583019986, -0.38410242435438646, -0.33147367666631616, -0.0863673247769333, 0.4183295875275791, -0.11189654151250555, 0.15808675173572828, -0.09790574852585966, 0.3279391683351424, -0.2978589814347108, 0.09135383582687003, 0.2727485962885521, 0.32487067073660125, -0.034968754564211786, 0.34646732026297317, 0.5297770242430984, -0.0371881039867606, -0.23692850958821898, 0.45929176723229304, 0.10935295956234986, 0.20161986561122464, -0.06191481704969458, -0.08575916345853996, -0.011499322031471922, -0.12894099433607575, -0.05654213930343732, 0.5872540068395662, -0.5136870701789149, 0.3844147714511263, 0.07000691524269319, 0.39699847530202576, -0.1404859013393063, -0.17348042019790813, 0.17892467208225554, -0.0038006326979036177, -0.04065603563344991, 0.06910134909798246, -0.4034971887738479, 0.30609668542233065, -0.3231112969895024, -0.5968398771499216, -0.24585864624878184, -0.1218063093105435, -0.10434793559834496, 0.397803913092232, -0.11082002727496477, -0.2456547212993758, -0.6957681949605934, -0.17980046346479114, -0.13186637587722316, 0.3097758998457899, 0.3823324064405141, -0.19224023083823608, 0.28029048253348365, -0.008766688460579408, 0.12977824957390227, -0.13778557112684234, -0.2043182530157052, 0.04401920905818534, 0.07070831362745714, 0.7363276535455822, -0.07365541536180628, 0.1390474451394638, -0.14049426345740634, -0.05907865767172484, 0.45541872540552136, -0.3135423696065183, -0.025552422754655683, -0.2340557291795239, -0.23143154594903378, 0.07084993823456254, 0.16533257884464778, -0.22253805061497042, -0.03348743146236923, -0.16203418111318182, -0.1895553558686674, -0.1407793811070831, 0.6155044927946928, 0.2556100249825307, 0.37547902774850594, 0.4430218543080372, -0.056652628337766534, -0.6994246567904105, 0.1490177437026007, 0.10074795157671976, -0.32151894013182697, -0.10975833046528871, -0.08398811082360148, 0.20826211332038708, -0.2167888048517446, -0.10881292643263354, 0.5002650798506634, -0.01696973575691239, -0.38871049342226466, 0.10674121865318087, 0.15853571798970936, -0.20744593537893724, -0.5211101394491356, -0.28641954351795923, -0.019801469290081378, -0.26906260385702707, -0.04803388402371561, 0.20209877252115335, -0.1836545785376813, -0.5158334878118823, 0.06172751071922599, 0.2775100340652095, -0.26990544135083827, 0.18954546615772927, 0.26912951390614814, -0.07576122867915983, -0.29219535915528694, -0.2598244814368463, -0.2653926314845839, 0.26506683637293216, 0.5847612663854281, -0.31097379480410836, -0.6174586970660713, -0.3520026276164236, -0.17140024502614967, 0.04790812631145973, 0.45952414582339896, -0.13688015491537037, -0.2190421833254689, -0.18902467561898717, -0.19514553592116596, 0.009330729183118386, -0.2903893555159715, 0.16450662916925676};
};
